/*
 * DevCycle Management API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package go_mgmt_sdk

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type ResultsApiService service

/*
ResultsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param feature A Feature key or ID
 * @param project A Project key or ID
 * @param optional nil or *ResultsApiResultsControllerGetEvaluationsPerHourByFeatureOpts - Optional Parameters:
     * @param "StartDate" (optional.Float64) -
     * @param "EndDate" (optional.Float64) -
     * @param "Platform" (optional.String) -
     * @param "Variable" (optional.String) -
     * @param "Environment" (optional.String) -  A Environment key or ID
     * @param "Period" (optional.String) -
@return ResultEvaluationsByHourDto
*/

type ResultsApiResultsControllerGetEvaluationsPerHourByFeatureOpts struct {
	StartDate   optional.Float64
	EndDate     optional.Float64
	Platform    optional.String
	Variable    optional.String
	Environment optional.String
	Period      optional.String
}

func (a *ResultsApiService) ResultsControllerGetEvaluationsPerHourByFeature(ctx context.Context, feature string, project string, localVarOptionals *ResultsApiResultsControllerGetEvaluationsPerHourByFeatureOpts) (ResultEvaluationsByHourDto, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResultEvaluationsByHourDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/projects/{project}/features/{feature}/results/evaluations"
	localVarPath = strings.Replace(localVarPath, "{"+"feature"+"}", fmt.Sprintf("%v", feature), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", fmt.Sprintf("%v", project), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Platform.IsSet() {
		localVarQueryParams.Add("platform", parameterToString(localVarOptionals.Platform.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Variable.IsSet() {
		localVarQueryParams.Add("variable", parameterToString(localVarOptionals.Variable.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Environment.IsSet() {
		localVarQueryParams.Add("environment", parameterToString(localVarOptionals.Environment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Period.IsSet() {
		localVarQueryParams.Add("period", parameterToString(localVarOptionals.Period.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResultEvaluationsByHourDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ResultsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param project A Project key or ID
 * @param optional nil or *ResultsApiResultsControllerGetEvaluationsPerHourByProjectOpts - Optional Parameters:
     * @param "StartDate" (optional.Float64) -
     * @param "EndDate" (optional.Float64) -
     * @param "Environment" (optional.String) -  A Environment key or ID
     * @param "Period" (optional.String) -
@return ResultProjectEvaluationsByHourDto
*/

type ResultsApiResultsControllerGetEvaluationsPerHourByProjectOpts struct {
	StartDate   optional.Float64
	EndDate     optional.Float64
	Environment optional.String
	Period      optional.String
}

func (a *ResultsApiService) ResultsControllerGetEvaluationsPerHourByProject(ctx context.Context, project string, localVarOptionals *ResultsApiResultsControllerGetEvaluationsPerHourByProjectOpts) (ResultProjectEvaluationsByHourDto, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResultProjectEvaluationsByHourDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/projects/{project}/results/evaluations"
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", fmt.Sprintf("%v", project), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Environment.IsSet() {
		localVarQueryParams.Add("environment", parameterToString(localVarOptionals.Environment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Period.IsSet() {
		localVarQueryParams.Add("period", parameterToString(localVarOptionals.Period.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResultProjectEvaluationsByHourDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ResultsApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param feature A Feature key or ID
 * @param project A Project key or ID
 * @param optional nil or *ResultsApiResultsControllerGetResultsSummaryOpts - Optional Parameters:
     * @param "StartDate" (optional.Float64) -
     * @param "EndDate" (optional.Float64) -
     * @param "Platform" (optional.String) -
     * @param "Variable" (optional.String) -
     * @param "Environment" (optional.String) -  A Environment key or ID
     * @param "Period" (optional.String) -
@return ResultSummaryDto
*/

type ResultsApiResultsControllerGetResultsSummaryOpts struct {
	StartDate   optional.Float64
	EndDate     optional.Float64
	Platform    optional.String
	Variable    optional.String
	Environment optional.String
	Period      optional.String
}

func (a *ResultsApiService) ResultsControllerGetResultsSummary(ctx context.Context, feature string, project string, localVarOptionals *ResultsApiResultsControllerGetResultsSummaryOpts) (ResultSummaryDto, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResultSummaryDto
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/projects/{project}/features/{feature}/results/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"feature"+"}", fmt.Sprintf("%v", feature), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", fmt.Sprintf("%v", project), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("startDate", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("endDate", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Platform.IsSet() {
		localVarQueryParams.Add("platform", parameterToString(localVarOptionals.Platform.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Variable.IsSet() {
		localVarQueryParams.Add("variable", parameterToString(localVarOptionals.Variable.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Environment.IsSet() {
		localVarQueryParams.Add("environment", parameterToString(localVarOptionals.Environment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Period.IsSet() {
		localVarQueryParams.Add("period", parameterToString(localVarOptionals.Period.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResultSummaryDto
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
